import Head from "next/head";
import styles from "../styles/Home.module.css";
import { sanityClient } from "../lib/sanity";
import RecipeCard from "../components/RecipeCard";
import { useState } from "react";

const recipesQuery = `*[_type=="recipe"]{name, _id, slug, mainImage}`;

export default function Home({ recipes }) {
  console.log(recipes);

  const [search, setSearch] = useState("");
  const [displayedRecipes, setDisplayedRecipes] = useState(recipes);

  function handleChange(e) {
    setSearch(e.target.value);
    handleSearch();
  }

  function handleSearch() {
    const query = search.toLowerCase();
    if (search.length >= 3) {
      let filteredRecipes = recipes?.filter((recipe) =>
        recipe.name.toLowerCase().includes(query)
      );
      setDisplayedRecipes(filteredRecipes);
    }
    if (search.length < 3) {
      setDisplayedRecipes(recipes);
    }
  }

  function clearSearch() {
    setDisplayedRecipes(recipes);
    setSearch("");
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Next Kitchen</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <section className={styles.title}>
          <h2>Welcome to Next Kitchen</h2>
          <h3>A recipe app created with NEXT.js and Sanity</h3>
        </section>

        <section>
          <div className={styles.search}>
            <input
              type="text"
              name="search"
              id="search"
              value={search}
              onChange={handleChange}
              placeholder="Search for a recipe"
            />
            <button onClick={clearSearch}>Clear</button>
          </div>
          <ul className={styles.recipeList}>
            {displayedRecipes?.length > 0 &&
              displayedRecipes.map((recipe) => (
                <RecipeCard recipe={recipe} key={recipe._id} />
              ))}
          </ul>
          <ul className={styles.recipeList}>
            {displayedRecipes?.length > 0 &&
              displayedRecipes.map((recipe) => (
                <RecipeCard recipe={recipe} key={recipe._id} />
              ))}
          </ul>
        </section>
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}

export async function getStaticProps() {
  const recipes = await sanityClient.fetch(recipesQuery);

  return {
    props: {
      recipes,
    },
    revalidate: 10,
  };
}
